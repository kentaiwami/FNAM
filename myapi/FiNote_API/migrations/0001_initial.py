# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2018-01-11 04:03
from __future__ import unicode_literals

import FiNote_API
import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BackUp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_date', models.DateField(default=datetime.date(2018, 1, 11))),
                ('dvd', models.IntegerField(default=0)),
                ('fav', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genre_id', models.IntegerField(default=0, unique=True)),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('tmdb_id', models.CharField(max_length=100, unique=True)),
                ('overview', models.TextField(default='', max_length=1000)),
                ('poster_path', models.CharField(default='', max_length=1000)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('genre', models.ManyToManyField(to='FiNote_API.Genre')),
            ],
        ),
        migrations.CreateModel(
            name='Onomatopoeia',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='OnomatopoeiaCount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(default=0)),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='FiNote_API.Movie')),
                ('onomatopoeia', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='FiNote_API.Onomatopoeia')),
            ],
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(default='username', max_length=100, unique=True)),
                ('email', models.EmailField(default='email', max_length=100, unique=True)),
                ('birthday', models.IntegerField(default=1900)),
                ('img', models.FileField(blank=True, upload_to=FiNote_API.models.AuthUser.get_img_path)),
                ('is_dummy', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='movie',
            name='onomatopoeia',
            field=models.ManyToManyField(to='FiNote_API.Onomatopoeia'),
        ),
        migrations.AddField(
            model_name='movie',
            name='user',
            field=models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='backup',
            name='movie',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='FiNote_API.Movie'),
        ),
        migrations.AddField(
            model_name='backup',
            name='onomatopoeia',
            field=models.ManyToManyField(to='FiNote_API.Onomatopoeia'),
        ),
        migrations.AddField(
            model_name='backup',
            name='username',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
